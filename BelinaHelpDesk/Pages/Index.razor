@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@using BelinaHelpDesk.Data
@using BelinaHelpDesk.Data.Models
@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor.Notifications.Internal
@inherits OwningComponentBase<BelinaHelpDeskService>
@if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
{
    <p>You are an Administrator named: <b>@CurrentUser.Identity.Name</b></p>
}

<SfToast ID="toast_default"
         @ref="ToastObj"
         Title="Help Desk Ticket"
         Content="@ToastContent" Timeout="5000">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<h3>New Help Desk Ticket</h3>
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
OnValidSubmit="@HandleValidSubmit">
<DataAnnotationsValidator></DataAnnotationsValidator>
<div>
<SfDropDownList TItem="HelpDeskStatus" TValue="string"
PopupHeight="230px" Index=0
Placeholder="Ticket Status"
DataSource="@HelpDeskStatus.Statuses"
FloatLabelType="@FloatLabelType.Always"
@bind-Value="@objHelpDeskTicket.TicketStatus">
<DropDownListFieldSettings Text="Text"
Value="ID"></DropDownListFieldSettings>
</SfDropDownList>
</div>
<div>
<SfDatePicker ID="TicketDate" Placeholder="Ticket Date"
FloatLabelType="@FloatLabelType.Always"
@bind-Value="@objHelpDeskTicket.TicketDate"
Max="DateTime.Now"
ShowClearButton="false"></SfDatePicker>
<ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
</div>
<div>
<SfTextBox Placeholder="Ticket Description"
FloatLabelType="@FloatLabelType.Always"
@bind-Value="@objHelpDeskTicket.TicketDescription"></SfTextBox>
<ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
</div>
<div>
<SfTextBox Placeholder="Requester Email"
FloatLabelType="@FloatLabelType.Always"
@bind-Value="@objHelpDeskTicket.TicketRequesterEmail"></SfTextBox>
<ValidationMessage For="@(() => objHelpDeskTicket.TicketRequesterEmail)" />
</div>
<br /><br />
<div class="e-footer-content">
<div class="button-container">
<button type="submit" class="e-btn e-normal e-primary">Save</button>
</div>
</div>
</EditForm>



@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string ADMINISTRATION_ROLE = "Administrators";

    protected override async Task OnInitializedAsync()
    {
    // Ensure there is an ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
    // Create ADMINISTRATION_ROLE role.
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
    // Try to get the administrator account.
        var user = await _UserManager.FindByNameAsync("Administrator@Email");
    // Administrator may not be created yet.
        if (user != null)
        {
    // Is administrator account in the administrator role?
            var UserResult =
                await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
    // Put admin in administrator role.
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
    // Get the current user.
    // Note: User may not be logged in.
        CurrentUser = (await authenticationStateTask).User;
    }
    
    SfToast ToastObj;
    private string ToastContent { get; set; } = "";
    
    // Global property for the help desk ticket.
    HelpDeskTicket objHelpDeskTicket =
        new HelpDeskTicket() { TicketDate = DateTime.Now };
    
    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
    // Create a HelpDeskTickets.
            HelpDeskTicket NewHelpDeskTickets =
                new HelpDeskTicket();
    // Set the values to the values entered
    // in the form.
            NewHelpDeskTickets.TicketDate =
                objHelpDeskTicket.TicketDate;
            NewHelpDeskTickets.TicketDescription =
                objHelpDeskTicket.TicketDescription;
            NewHelpDeskTickets.TicketRequesterEmail =
                objHelpDeskTicket.TicketRequesterEmail;
            NewHelpDeskTickets.TicketStatus =
                objHelpDeskTicket.TicketStatus;
    // Create a new GUID for this help desk ticket.
            NewHelpDeskTickets.TicketGuid =
                System.Guid.NewGuid().ToString();
    // Save the new help desk ticket.
            var result =
                @Service.CreateTicketAsync(NewHelpDeskTickets);
    // Clear the form.
            objHelpDeskTicket = new HelpDeskTicket();
    // Show the Toast.
            ToastContent = "Saved!";
            await Task.Delay(100);
            await this.ToastObj.Show();
        }
        catch (Exception ex)
        {
            ToastContent = ex.GetBaseException().Message;
            await this.ToastObj.Show();
        }
    }
    

}